name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  packages: write
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/home-assistant-temperature-web

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker container
      run: |
        # Pull the image we just built
        docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        
        # Test with dummy data
        echo "Starting container with dummy data..."
        docker run -d --name test-container \
          -p 5000:5000 \
          -e USE_DUMMY_DATA=true \
          -e FLASK_RUN_HOST=0.0.0.0 \
          -e FLASK_RUN_PORT=5000 \
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
        
        # Wait for container to be ready
        echo "Waiting for container to be ready..."
        timeout 60s bash -c 'until curl -f http://localhost:5000 > /dev/null 2>&1; do sleep 2; done'
        
        # Test the application
        echo "Testing application..."
        response=$(curl -s http://localhost:5000)
        if echo "$response" | grep -q "25&deg;C / 77.0&deg;F"; then
          echo "‚úÖ Application test passed"
        else
          echo "‚ùå Application test failed"
          echo "Response: $response"
          exit 1
        fi
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: always()
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner (SARIF)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
        ignore-unfixed: false
        vuln-type: 'os,library'
        scanners: 'vuln,secret'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        category: 'trivy'

    - name: Run Trivy vulnerability scanner (table)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        output: 'trivy-results.txt'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Upload Trivy scan results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-scan-results
        path: trivy-results.txt
        retention-days: 30

    - name: Display Trivy scan results
      run: |
        echo "=== Trivy Vulnerability Scan Results ==="
        if [ -f trivy-results.txt ]; then
          cat trivy-results.txt
        else
          echo "No scan results found"
        fi

    - name: Comment PR with scan results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v8
      with:
        script: |
          const fs = require('fs');
          
          try {
            const results = fs.readFileSync('trivy-results.txt', 'utf8');
            const comment = `## üîç Security Scan Results
            
            <details>
            <summary>Click to view Trivy vulnerability scan results</summary>
            
            \`\`\`
            ${results}
            \`\`\`
            </details>
            
            *This scan was performed on commit ${{ github.sha }}*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not read scan results:', error.message);
          }
