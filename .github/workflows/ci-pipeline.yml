name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        id: docker-cache
        with:
          path: /home/runner/.docker/overlay2
          key: ${{ runner.os }}-docker-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build Docker Image
        run: |
          echo "Building Docker image..."
          docker build --cache-from type=local,src=/home/runner/.docker/overlay2 \
                       --cache-to type=local,dest=/home/runner/.docker/overlay2-new \
                       -t home-assistant-temperature-web .
          echo "Docker image built successfully."

      - name: Save Docker Image as Artifact
        run: |
          echo "Saving Docker image as artifact..."
          docker save home-assistant-temperature-web -o home-assistant-temperature-web.tar
        shell: bash

      - name: Upload Docker Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: home-assistant-temperature-web.tar

  # Test Job
  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          echo "Loading Docker image..."
          docker load -i home-assistant-temperature-web.tar
          echo "Docker image loaded successfully."

      - name: Run Container with Dummy Data
        run: |
          echo "Starting Docker container with dummy data..."
          docker run -d --name test-container -p 5000:5000 \
            -e USE_DUMMY_DATA=true \
            -e FLASK_RUN_HOST="0.0.0.0" \
            -e FLASK_RUN_PORT=5000 \
            home-assistant-temperature-web
          echo "Waiting for Docker container to become ready..."
          for i in {1..10}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Docker container is ready."
              break
            fi
            echo "Waiting for container... ($i/10)"
            sleep 2
            if [ "$i" -eq 10 ]; then
              echo "Docker container failed to start in time."
              exit 1
            fi
          done
          echo "Docker container started successfully."

      - name: Install dependencies
        run: |
          echo "Installing dependencies for testing..."
          python -m pip install --upgrade pip
          pip install pytest pytest-cov requests

      - name: Run Pytest
        run: |
          echo "Running tests with pytest..."
          pytest tests/ --cov=your_package --cov-report=xml
        env:
          USE_DUMMY_DATA: 'true'
          FLASK_RUN_HOST: "0.0.0.0"
          FLASK_RUN_PORT: "5000"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Stop and Remove Container
        run: |
          echo "Stopping and removing Docker container..."
          docker stop test-container && docker rm test-container
          echo "Docker container stopped and removed."

  # Scan Job
  scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: docker-image

      - name: Load Docker Image
        run: |
          echo "Loading Docker image..."
          docker load -i home-assistant-temperature-web.tar
          echo "Docker image loaded successfully."

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: home-assistant-temperature-web
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          output: trivy-results.txt

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: trivy-results.txt

      - name: Display Trivy Scan Results
        run: |
          echo "Displaying Trivy scan results..."
          cat trivy-results.txt
