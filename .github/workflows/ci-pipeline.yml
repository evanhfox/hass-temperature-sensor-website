name: CI Pipeline

on:
  push:
    branches:
      - main

permissions:
  contents: read
  packages: write

jobs:
  # Build Job
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/home-assistant-temperature-web:${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          driver: docker-container

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and Push Docker Image
        run: |
          echo "Building and pushing Docker image: $IMAGE_NAME"
          docker buildx build --push -t $IMAGE_NAME .

  # Test Job
  test:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/home-assistant-temperature-web:${{ github.sha }}
    steps:
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Docker Image
        run: |
          echo "Pulling Docker image: $IMAGE_NAME"
          docker pull $IMAGE_NAME

      - name: Run Container with Dummy Data
        run: |
          echo "Starting Docker container with dummy data..."
          docker run -d --name test-container -p 5000:5000 \
            -e USE_DUMMY_DATA=true \
            -e FLASK_RUN_HOST="0.0.0.0" \
            -e FLASK_RUN_PORT=5000 \
            $IMAGE_NAME
          echo "Waiting for Docker container to become ready..."
          for i in {1..10}; do
            if curl -s http://localhost:5000 > /dev/null; then
              echo "Docker container is ready."
              break
            fi
            echo "Waiting for container... ($i/10)"
            sleep 2
            if [ "$i" -eq 10 ]; then
              echo "Docker container failed to start in time."
              exit 1
            fi
          done
          echo "Docker container started successfully."

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      - name: Install Dependencies for Testing
        run: |
          echo "Installing dependencies for testing..."
          python -m pip install --upgrade pip
          pip install pytest pytest-cov requests

      - name: Run Pytest
        run: |
          echo "Running tests with pytest..."
          pytest tests/ --cov=your_package --cov-report=xml
        env:
          USE_DUMMY_DATA: 'true'
          FLASK_RUN_HOST: "0.0.0.0"
          FLASK_RUN_PORT: "5000"

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

      - name: Stop and Remove Container
        run: |
          echo "Stopping and removing Docker container..."
          docker stop test-container && docker rm test-container
          echo "Docker container stopped and removed."

  # Scan Job
  scan:
    runs-on: ubuntu-latest
    needs: build
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}/home-assistant-temperature-web:${{ github.sha }}
    steps:
      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Pull Docker Image
        run: |
          echo "Pulling Docker image: $IMAGE_NAME"
          docker pull $IMAGE_NAME

      - name: Run Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'table'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          output: trivy-results.txt

      - name: Upload Trivy Scan Results
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-results
          path: trivy-results.txt

      - name: Display Trivy Scan Results
        run: |
          echo "Displaying Trivy scan results..."
          cat trivy-results.txt
